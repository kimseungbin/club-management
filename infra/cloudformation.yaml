AWSTemplateFormatVersion: "2010-09-09"
Description: Main resource template for club-management app.
Parameters:
  ProjectName:
    Type: String
    Default: club
  VpcCidr:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.0.0/16
    Description: The CIDR block of the VPC.
  ECRRepositoryURI:
    Type: String
    Description: The URI of the ECR repository. If it is not provided, then Cfn creates new ECR Repository resource.
    Default: ""
  HostedZoneName:
    Type: String
    Description: The name of the DNS zone e.g., domain.com
    AllowedPattern: "(?=.+)(?=^.{1,253}$)(^(((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9])\\.)*((?!-)[a-zA-Z0-9]{1,63}))$"
    ConstraintDescription: Must be a valid DNS zone name.
  HostedZoneId:
    Type: String
    Description: The ID of the DNS zone.
  CognitoCustomDomainCertificateArn:
    Type: String
    Description: The ARN of Cognito Custom Domain Certificate created in us-east-1 region. It is created in that region because all certificates using CloudFront must be in that region.
  CognitoCustomSubDomain:
    Type: String
    Description: The custom domain name for Cognito. Suggest auth.[HOSTED_ZONE_NAME] e.g., auth.domain.com
    Default: auth
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters:
          - ProjectName
      - Label:
          default: Network Configuration
        Parameters:
          - VpcCidr
      - Label:
          default: Container Configuration
        Parameters:
          - ECRRepositoryURI
      - Label:
          default: Domain Configuration
        Parameters:
          - HostedZoneName
          - HostedZoneId
          - CognitoCustomDomainCertificateArn
          - CognitoCustomSubDomain
Conditions:
  IsECRRepositoryURIBlank: !Equals [ !Ref ECRRepositoryURI, "" ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref ProjectName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # ------------------------------------------------------------#
  # Public Subnets
  # ------------------------------------------------------------#

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref AWS::Region ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${ProjectName}-public-1
              - ProjectName: !Ref ProjectName
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref AWS::Region ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${ProjectName}-public-2
              - ProjectName: !Ref ProjectName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ------------------------------------------------------------#
  # Private Subnets
  # ------------------------------------------------------------#

  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${ProjectName}-app-1
              - ProjectName: !Ref ProjectName
  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${ProjectName}-app-2
              - ProjectName: !Ref ProjectName
  DbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${ProjectName}-db-1
              - ProjectName: !Ref ProjectName
  DbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ] ]
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${ProjectName}-db-2
              - ProjectName: !Ref ProjectName
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  AppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet1
      RouteTableId: !Ref PublicRouteTable
  DbSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  AppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet2
      RouteTableId: !Ref PublicRouteTable
  DbSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  #---------------------------------------------------------------------
  # ECS
  #---------------------------------------------------------------------

  EcrRepository:
    Type: AWS::ECR::Repository
    Condition: IsECRRepositoryURIBlank
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 3 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 3
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
  EcsCluster:
    Type: AWS::ECS::Cluster
  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPs request to the load balancer.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
      IpAddressType: ipv4
  ALBRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName:
        Fn::Sub:
          - ${HostedZoneName}.
          - HostedZoneName: !Ref HostedZoneName
      Comment: ALB DNS record
      RecordSets:
        - Name: !Ref HostedZoneName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt [ ApplicationLoadBalancer, CanonicalHostedZoneID ]
            DNSName: !GetAtt [ ApplicationLoadBalancer, DNSName ]
        - Name:
            Fn::Sub:
              - www.${HostedZoneName}
              - HostedZoneName: !Ref HostedZoneName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt [ ApplicationLoadBalancer, CanonicalHostedZoneID ]
            DNSName: !GetAtt [ ApplicationLoadBalancer, DNSName ]
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
  RootCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref HostedZoneName
      DomainValidationOptions:
        - DomainName: !Ref HostedZoneName
          HostedZoneId: !Ref HostedZoneId
      SubjectAlternativeNames:
        - Fn::Sub:
            - www.${HostedZoneName}
            - HostedZoneName: !Ref HostedZoneName
      ValidationMethod: DNS
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroup
          Type: forward
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref RootCertificate
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
  # Execution role gives the ECs container agent the needed permissions to make AWs API calls.
  # These permissions are necessary for the agent to, for instance, pull a Docker container image from ECR, or to publish logs to CloudWatch
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  # Task role is associated with the task and defines what AWS functionality the containers themselves can call.
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
  TaskDefinitionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt [ ExecutionRole, Arn ]
      TaskRoleArn: !GetAtt [ TaskRole, Arn ]
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Ref ProjectName
          Image:
            # If Repository URI is blank, use newly created Repository resource. If not, then use provided URI.
            Fn::If:
              - IsECRRepositoryURIBlank
              - Fn::Join:
                  - ':'
                  - - !GetAtt [ EcrRepository, RepositoryUri ]
                    - latest
              - !Ref ECRRepositoryURI
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskDefinitionLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProjectName
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Environment:
            - Name: DB_HOST
              Value: !GetAtt [ DBInstance, Endpoint.Address ]
            - Name: PORT
              Value: 80
            - Name: COGNITO_CLIENT_ID
              Value: !GetAtt [ UserPoolClient, ClientId ]
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Only allow traffics from Application Load Balancer Security Group.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName: !Ref ProjectName
          ContainerPort: 80
          TargetGroupArn: !GetAtt [ TargetGroup, TargetGroupArn ]
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref AppSubnet1
            - !Ref AppSubnet2
  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Only allow access from ECS to RDS.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ServiceSecurityGroup
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref DbSubnet1
        - !Ref DbSubnet2
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      EngineVersion: 16
      MasterUsername: postgres
      MasterUserPassword: postgres
      VPCSecurityGroups:
        - !Ref DbSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBName: postgres

  # ------------------------------------------------------------#
  # Authentication
  # ------------------------------------------------------------#

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_phone_number
            Priority: 1
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: false
      UserPoolName: !Ref ProjectName
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Ref ProjectName
      UserPoolId: !Ref UserPool
      CallbackURLs:
        - 'https://www.snle.net'
      LogoutURLs:
        - 'https://www.snle.net'
      AllowedOAuthFlows:
        - 'implicit'
      AllowedOAuthScopes:
        - 'email'
        - 'openid'
      SupportedIdentityProviders:
        - 'COGNITO'
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: false # enabling this will break the frontend sign in
      TokenValidityUnits:
        IdToken: days
        AccessToken: days
        RefreshToken: days
      IdTokenValidity: 1
      AccessTokenValidity: 1
      RefreshTokenValidity: 30
  # The identity pool handle user's access to AWS resources like S3 directly using AWS API with its own authentication system (IAM).
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref ProjectName
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt [ UserPool, ProviderName ]
  # cf. https://daaru.medium.com/cognito-hosted-ui-with-cloudformation-8993fc878a4f
  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - '-'
          - - !Ref ProjectName
            - cognito
            - authorized
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              'StringEquals':
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName:
            Fn::Join:
              - '-'
              - - !Ref ProjectName
                - cognito
                - authorized
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  # Todo. Dummy actions. Update this to actual S3 bucket for files
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt [ CognitoAuthorizedRole, Arn ]
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn:
      - ALBRecordSetGroup
    Properties:
      UserPoolId: !Ref UserPool
      Domain:
        Fn::Join:
          - '.'
          - - !Ref CognitoCustomSubDomain
            - !Ref HostedZoneName
      CustomDomainConfig:
        CertificateArn: !Ref CognitoCustomDomainCertificateArn
  HostedUICustomDomain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:
        Fn::Sub:
          - ${HostedZoneName}.
          - HostedZoneName: !Ref HostedZoneName
      Name:
        Fn::Join:
          - '.'
          - - !Ref CognitoCustomSubDomain
            - !Ref HostedZoneName
      Type: A
      # AliasTarget is used to point our domain to another AWS resource.
      # In this case, it's the CloudFront distribution for the Cognito domain.
      AliasTarget:
        DNSName: !GetAtt [ UserPoolDomain, CloudFrontDistribution ]
        EvaluateTargetHealth: false
        # This is always the hosted zone ID when you create an alias record that routes traffic to a CloudFront distribution.
        HostedZoneId: Z2FDTNDATAQYW2
